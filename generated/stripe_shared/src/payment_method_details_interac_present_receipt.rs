#[derive(Clone, Debug, Default)]
#[cfg_attr(not(feature = "min-ser"), derive(serde::Serialize))]
#[cfg_attr(not(feature = "min-ser"), derive(serde::Deserialize))]
pub struct PaymentMethodDetailsInteracPresentReceipt {
    /// The type of account being debited or credited
    pub account_type: Option<PaymentMethodDetailsInteracPresentReceiptAccountType>,
    /// EMV tag 9F26, cryptogram generated by the integrated circuit chip.
    pub application_cryptogram: Option<String>,
    /// Mnenomic of the Application Identifier.
    pub application_preferred_name: Option<String>,
    /// Identifier for this transaction.
    pub authorization_code: Option<String>,
    /// EMV tag 8A. A code returned by the card issuer.
    pub authorization_response_code: Option<String>,
    /// How the cardholder verified ownership of the card.
    pub cardholder_verification_method: Option<String>,
    /// EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
    pub dedicated_file_name: Option<String>,
    /// The outcome of a series of EMV functions performed by the card reader.
    pub terminal_verification_results: Option<String>,
    /// An indication of various EMV functions performed during the transaction.
    pub transaction_status_information: Option<String>,
}
#[cfg(feature = "min-ser")]
pub struct PaymentMethodDetailsInteracPresentReceiptBuilder {
    account_type: Option<Option<PaymentMethodDetailsInteracPresentReceiptAccountType>>,
    application_cryptogram: Option<Option<String>>,
    application_preferred_name: Option<Option<String>>,
    authorization_code: Option<Option<String>>,
    authorization_response_code: Option<Option<String>>,
    cardholder_verification_method: Option<Option<String>>,
    dedicated_file_name: Option<Option<String>>,
    terminal_verification_results: Option<Option<String>>,
    transaction_status_information: Option<Option<String>>,
}

#[cfg(feature = "min-ser")]
const _: () = {
    use miniserde::de::{Map, Visitor};
    use miniserde::{make_place, Deserialize, Result};
    use stripe_types::{MapBuilder, ObjectDeser};

    make_place!(Place);

    impl Deserialize for PaymentMethodDetailsInteracPresentReceipt {
        fn begin(out: &mut Option<Self>) -> &mut dyn Visitor {
            Place::new(out)
        }
    }

    struct Builder<'a> {
        out: &'a mut Option<PaymentMethodDetailsInteracPresentReceipt>,
        builder: PaymentMethodDetailsInteracPresentReceiptBuilder,
    }

    impl Visitor for Place<PaymentMethodDetailsInteracPresentReceipt> {
        fn map(&mut self) -> Result<Box<dyn Map + '_>> {
            Ok(Box::new(Builder { out: &mut self.out, builder: PaymentMethodDetailsInteracPresentReceiptBuilder::deser_default() }))
        }
    }

    impl MapBuilder for PaymentMethodDetailsInteracPresentReceiptBuilder {
        type Out = PaymentMethodDetailsInteracPresentReceipt;
        fn key(&mut self, k: &str) -> miniserde::Result<&mut dyn Visitor> {
            #[allow(clippy::match_single_binding)]
            match k {
                "account_type" => Ok(Deserialize::begin(&mut self.account_type)),
                "application_cryptogram" => Ok(Deserialize::begin(&mut self.application_cryptogram)),
                "application_preferred_name" => Ok(Deserialize::begin(&mut self.application_preferred_name)),
                "authorization_code" => Ok(Deserialize::begin(&mut self.authorization_code)),
                "authorization_response_code" => Ok(Deserialize::begin(&mut self.authorization_response_code)),
                "cardholder_verification_method" => Ok(Deserialize::begin(&mut self.cardholder_verification_method)),
                "dedicated_file_name" => Ok(Deserialize::begin(&mut self.dedicated_file_name)),
                "terminal_verification_results" => Ok(Deserialize::begin(&mut self.terminal_verification_results)),
                "transaction_status_information" => Ok(Deserialize::begin(&mut self.transaction_status_information)),

                _ => Ok(<dyn Visitor>::ignore()),
            }
        }

        fn deser_default() -> Self {
            Self {
                account_type: Deserialize::default(),
                application_cryptogram: Deserialize::default(),
                application_preferred_name: Deserialize::default(),
                authorization_code: Deserialize::default(),
                authorization_response_code: Deserialize::default(),
                cardholder_verification_method: Deserialize::default(),
                dedicated_file_name: Deserialize::default(),
                terminal_verification_results: Deserialize::default(),
                transaction_status_information: Deserialize::default(),
            }
        }

        fn take_out(&mut self) -> Option<Self::Out> {
            let account_type = self.account_type.take()?;
            let application_cryptogram = self.application_cryptogram.take()?;
            let application_preferred_name = self.application_preferred_name.take()?;
            let authorization_code = self.authorization_code.take()?;
            let authorization_response_code = self.authorization_response_code.take()?;
            let cardholder_verification_method = self.cardholder_verification_method.take()?;
            let dedicated_file_name = self.dedicated_file_name.take()?;
            let terminal_verification_results = self.terminal_verification_results.take()?;
            let transaction_status_information = self.transaction_status_information.take()?;

            Some(Self::Out {
                account_type,
                application_cryptogram,
                application_preferred_name,
                authorization_code,
                authorization_response_code,
                cardholder_verification_method,
                dedicated_file_name,
                terminal_verification_results,
                transaction_status_information,
            })
        }
    }

    impl<'a> Map for Builder<'a> {
        fn key(&mut self, k: &str) -> Result<&mut dyn Visitor> {
            self.builder.key(k)
        }

        fn finish(&mut self) -> Result<()> {
            *self.out = self.builder.take_out();
            Ok(())
        }
    }

    impl ObjectDeser for PaymentMethodDetailsInteracPresentReceipt {
        type Builder = PaymentMethodDetailsInteracPresentReceiptBuilder;
    }
};
/// The type of account being debited or credited
#[derive(Copy, Clone, Eq, PartialEq)]
pub enum PaymentMethodDetailsInteracPresentReceiptAccountType {
    Checking,
    Savings,
    Unknown,
}
impl PaymentMethodDetailsInteracPresentReceiptAccountType {
    pub fn as_str(self) -> &'static str {
        use PaymentMethodDetailsInteracPresentReceiptAccountType::*;
        match self {
            Checking => "checking",
            Savings => "savings",
            Unknown => "unknown",
        }
    }
}

impl std::str::FromStr for PaymentMethodDetailsInteracPresentReceiptAccountType {
    type Err = ();
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use PaymentMethodDetailsInteracPresentReceiptAccountType::*;
        match s {
            "checking" => Ok(Checking),
            "savings" => Ok(Savings),
            "unknown" => Ok(Unknown),
            _ => Err(()),
        }
    }
}
impl AsRef<str> for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl std::fmt::Display for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}

impl std::fmt::Debug for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}
impl serde::Serialize for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}
impl<'de> serde::Deserialize<'de> for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        use std::str::FromStr;
        let s: std::borrow::Cow<'de, str> = serde::Deserialize::deserialize(deserializer)?;
        Self::from_str(&s).map_err(|_| serde::de::Error::custom("Unknown value for PaymentMethodDetailsInteracPresentReceiptAccountType"))
    }
}
#[cfg(feature = "min-ser")]
impl miniserde::Deserialize for PaymentMethodDetailsInteracPresentReceiptAccountType {
    fn begin(out: &mut Option<Self>) -> &mut dyn miniserde::de::Visitor {
        crate::Place::new(out)
    }
}

#[cfg(feature = "min-ser")]
impl miniserde::de::Visitor for crate::Place<PaymentMethodDetailsInteracPresentReceiptAccountType> {
    fn string(&mut self, s: &str) -> miniserde::Result<()> {
        use std::str::FromStr;
        self.out = Some(PaymentMethodDetailsInteracPresentReceiptAccountType::from_str(s).map_err(|_| miniserde::Error)?);
        Ok(())
    }
}
